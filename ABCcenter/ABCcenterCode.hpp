
/**
 * @file ABCcenterCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2024-10-01                                                                     
 **/	

#ifndef ABCcenterCode_H_
#define ABCcenterCode_H_

#include "robots/blinkyBlocks/blinkyBlocksSimulator.h"
#include "robots/blinkyBlocks/blinkyBlocksWorld.h"
#include "robots/blinkyBlocks/blinkyBlocksBlockCode.h"
static const int AGRADIENT_MSG_ID = 1001;
static const int ABACK_MSG_ID = 1002;
static const int ELECTB_MSG_ID = 1003;
static const int BGRADIENT_MSG_ID = 1004;
static const int BBACK_MSG_ID = 1005;
static const int ELECTC_MSG_ID = 1006;
static const int CGRADIENT_MSG_ID = 1007;
static const int CBACK_MSG_ID = 1008;
static const int ELECTCENTER_MSG_ID = 1009;


using namespace BlinkyBlocks;

class ABCcenterCode : public BlinkyBlocksBlockCode {
private:
	BlinkyBlocksBlock *module = nullptr;
	int myCurrentRound;
    	P2PNetworkInterface *myParent;
    	bool isA;
    	bool isB;
    	bool isC;
    	P2PNetworkInterface *myToBPort;
    	P2PNetworkInterface *myToCPort;
    	P2PNetworkInterface *myToGPort;
    	int myMaxADistance;
    	int myADistance;
    	int myMaxBDistance;
    	int myBDistance;
    	int myMaxCDistance;
    	int myCDistance;
    	int myMinG;
    	int myNbWaitedAnswers;

public :
	ABCcenterCode(BlinkyBlocksBlock *host);
	~ABCcenterCode() {};

/**
  * This function is called on startup of the blockCode, it can be used to perform initial
  *  configuration of the host or this instance of the program.
  * @note this can be thought of as the main function of the module
  */
    void startup() override;
    void myAGradientFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface *sender);
    void myABackFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'ElectB'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myElectBFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'Bgradient'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myBgradientFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);
   
   

/**
  * @brief Message handler for the message 'Bback'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myBbackFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'ElectC'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myElectCFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'Cgradient'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myCgradientFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'Cback'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myCbackFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);
   void myElectCenterFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface*sender);
   
   string onInterfaceDraw() override;

/*****************************************************************************/
/** needed to associate code to module                                      **/
	static BlockCode *buildNewBlockCode(BuildingBlock *host) {
	    return(new ABCcenterCode((BlinkyBlocksBlock*)host));
	}
/*****************************************************************************/
};

#endif /* ABCcenterCode_H_ */
